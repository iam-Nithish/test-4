///////water bill

CREATE TABLE WaterBills (
    BillID INT PRIMARY KEY IDENTITY,
    CustomerName NVARCHAR(100),
    WaterConsumption DECIMAL(10, 2),
    TotalAmount DECIMAL(10, 2),
    BillingDate DATETIME
);
//controller

using System;
using System.Linq;
using System.Web.Mvc;
using YourApp.Models;

namespace YourApp.Controllers
{
    public class WaterBillController : Controller
    {
        // GET: WaterBill/Calculate
        public ActionResult Calculate()
        {
            return View();
        }

        // POST: WaterBill/Calculate
        [HttpPost]
        public ActionResult Calculate(string customerName, decimal waterConsumption)
        {
            var totalAmount = CalculateBill(waterConsumption);

            // Save the bill in the database
            using (var context = new YourDbContext())
            {
                var bill = new WaterBill
                {
                    CustomerName = customerName,
                    WaterConsumption = waterConsumption,
                    TotalAmount = totalAmount,
                    BillingDate = DateTime.Now
                };

                context.WaterBills.Add(bill);
                context.SaveChanges();
            }

            ViewBag.TotalAmount = totalAmount;
            ViewBag.CustomerName = customerName;
            ViewBag.WaterConsumption = waterConsumption;

            return View("BillDetails");
        }

        private decimal CalculateBill(decimal waterConsumption)
        {
            // Same logic as mentioned above
            decimal totalAmount = 0;

            if (waterConsumption <= 1000)
            {
                totalAmount = waterConsumption * 0.05M;
            }
            else if (waterConsumption <= 5000)
            {
                totalAmount = (1000 * 0.05M) + ((waterConsumption - 1000) * 0.10M);
            }
            else
            {
                totalAmount = (1000 * 0.05M) + (4000 * 0.10M) + ((waterConsumption - 5000) * 0.15M);
            }

            return totalAmount;
        }
    }
}
//viewViews/WaterBill/Calculate.cshtml

@{
    ViewBag.Title = "Calculate Water Bill";
}

<h2>Calculate Water Bill</h2>

@using (Html.BeginForm("Calculate", "WaterBill", FormMethod.Post))
{
    <div>
        <label>Customer Name:</label>
        @Html.TextBox("customerName")
    </div>

    <div>
        <label>Water Consumption (Liters):</label>
        @Html.TextBox("waterConsumption", null, new { type = "number", step = "0.01" })
    </div>

    <button type="submit">Calculate</button>
}

Views/WaterBill/BillDetails.cshtml

@{
    ViewBag.Title = "Bill Details";
}

<h2>Bill Details</h2>

<p>Customer Name: @ViewBag.CustomerName</p>
<p>Water Consumption: @ViewBag.WaterConsumption Liters</p>
<p>Total Amount: @ViewBag.TotalAmount</p>

<a href="/WaterBill/Calculate">Calculate Another Bill</a>
===========electricity=====

CREATE TABLE ElectricityBills (
    BillID INT PRIMARY KEY IDENTITY,
    CustomerName NVARCHAR(100),
    ElectricityConsumption DECIMAL(10, 2), -- in kWh
    TotalAmount DECIMAL(10, 2),
    BillingDate DATETIME
);
using System;
using System.Linq;
using System.Web.Mvc;
using YourApp.Models;

namespace YourApp.Controllers
{
    public class ElectricityBillController : Controller
    {
        // GET: ElectricityBill/Calculate
        public ActionResult Calculate()
        {
            return View();
        }

        // POST: ElectricityBill/Calculate
        [HttpPost]
        public ActionResult Calculate(string customerName, decimal electricityConsumption)
        {
            var totalAmount = CalculateElectricityBill(electricityConsumption);

            // Save the bill in the database
            using (var context = new YourDbContext())
            {
                var bill = new ElectricityBill
                {
                    CustomerName = customerName,
                    ElectricityConsumption = electricityConsumption,
                    TotalAmount = totalAmount,
                    BillingDate = DateTime.Now
                };

                context.ElectricityBills.Add(bill);
                context.SaveChanges();
            }

            ViewBag.TotalAmount = totalAmount;
            ViewBag.CustomerName = customerName;
            ViewBag.ElectricityConsumption = electricityConsumption;

            return View("BillDetails");
        }

        private decimal CalculateElectricityBill(decimal consumption)
        {
            // Same logic as above
            decimal totalAmount = 0;

            if (consumption <= 100)
            {
                totalAmount = consumption * 0.50M;
            }
            else if (consumption <= 500)
            {
                totalAmount = (100 * 0.50M) + ((consumption - 100) * 0.75M);
            }
            else
            {
                totalAmount = (100 * 0.50M) + (400 * 0.75M) + ((consumption - 500) * 1.00M);
            }

            return totalAmount;
        }
    }
}
///view

@{
    ViewBag.Title = "Calculate Electricity Bill";
}

<h2>Calculate Electricity Bill</h2>

@using (Html.BeginForm("Calculate", "ElectricityBill", FormMethod.Post))
{
    <div>
        <label>Customer Name:</label>
        @Html.TextBox("customerName")
    </div>

    <div>
        <label>Electricity Consumption (kWh):</label>
        @Html.TextBox("electricityConsumption", null, new { type = "number", step = "0.01" })
    </div>

    <button type="submit">Calculate</button>
}
=============

@{
    ViewBag.Title = "Electricity Bill Details";
}

<h2>Bill Details</h2>

<p>Customer Name: @ViewBag.CustomerName</p>
<p>Electricity Consumption: @ViewBag.ElectricityConsumption kWh</p>
<p>Total Amount: @ViewBag.TotalAmount</p>

<a href="/ElectricityBill/Calculate">Calculate Another Bill</a>
