//display with how to count and how to sum 

  //display
  [HttpGet]
  public ActionResult ProductList()
  {
      try
      {
          using (var context = new MyntraEntities())
          {
              int activeProductsCount = GetActiveProductsCount(); // Get count of active products
              int inactiveProductsCount = GetInactiveProductsCount();
              decimal totalPrice = GetTotalPrice();
              int totalProducts = GetTotalProducts();
              ViewBag.ActiveProductsCount = activeProductsCount; // Store active products count in ViewBag
              ViewBag.InactiveProductsCount = inactiveProductsCount;
              ViewBag.TotalProducts = totalProducts;
              ViewBag.TotalPrice = totalPrice;
              var products = context.Products.ToList();
              return View(products);
          }
      }
      catch (Exception ex)
      {
          // Handle the exception (e.g., log it)
          Response.Write(ex.Message);
          return View(new List<Product>()); // Return an empty list in case of error
      }
  }
  public int GetTotalProducts()
  {
      using (var context = new MyntraEntities())
      {
          // Count the total number of products
          int totalProducts = context.Products.Count();
          return totalProducts;
      }
  }
  //total price
  public decimal GetTotalPrice()
  {
      using (var context = new MyntraEntities())
      {
          // Sum the ProductPrice from the Products table
          decimal totalPrice = context.Products.Sum(p => p.ProductPrice) ?? 0; // Use null coalescing operator to handle null values
          return totalPrice;
      }
  }
  public int GetActiveProductsCount()
  {
      using (var context = new MyntraEntities())
      {
          // Count the number of products where status is 'Active'
          int activeProductsCount = context.Products.Count(p => p.Status == "Active");
          return activeProductsCount;
      }
  }
  public int GetInactiveProductsCount()
  {
      using (var context = new MyntraEntities())
      {
          // Count the number of products where status is 'Inactive'
          int inactiveProductsCount = context.Products.Count(p => p.Status == "Inactive");
          return inactiveProductsCount;
      }
  }



==========create-=====


        // GET: Product/Create
        [HttpGet]
        public ActionResult AddProducts()
        {
            return View();
        }

        // POST: Product/Create
        [HttpPost]
        public ActionResult AddProducts(Product productData, HttpPostedFileBase ImageFile)
        {
            try
            {
                if (ImageFile != null && ImageFile.ContentLength > 0)
                {
                    // Ensure the directory exists
                    string directoryPath = Server.MapPath("~/Images/");
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }

                    // Save the file to the server
                    string path = Path.Combine(directoryPath, Path.GetFileName(ImageFile.FileName));
                    ImageFile.SaveAs(path);

                    // Set the ImagePath for storing in the database
                    productData.ProductImage = "~/Images/" + ImageFile.FileName;
                }

                // Save the product data to the database
                db.Products.Add(productData);
                int resultValue = db.SaveChanges();

                if (resultValue > 0)
                {
                    ViewBag.Message = "Product added successfully";
                }
                else
                {
                    ViewBag.Message = "Product not inserted";
                }
            }
            catch (Exception ex)
            {
                ViewBag.Message = "Error: " + ex.Message;
            }
            return View(productData);
        }

==========edit================

 //edit
 [HttpGet]
 public ActionResult EditProducts(int id)
 {
     using (var context = new MyntraEntities())
     {
         var product = context.Products.Find(id);
         if (product == null)
         {
             return HttpNotFound(); // Return 404 if the product is not found
         }
         return View(product);
     }
 }

 // POST: Products/Edit/5
 [HttpPost]
 public ActionResult EditProducts(Product model, HttpPostedFileBase ProductImage)
 {
     try
     {
         using (var context = new MyntraEntities())
         {
             var existingProduct = context.Products.Find(model.ProductID);
             if (existingProduct != null)
             {
                 existingProduct.ProductName = model.ProductName;
                 existingProduct.ProductPrice = model.ProductPrice;
                 existingProduct.ProductDescription = model.ProductDescription;
                 existingProduct.Category = model.Category;
                 existingProduct.Color = model.Color;
                 existingProduct.Brand = model.Brand;

                 // Check if a new image is uploaded
                 if (ProductImage != null && ProductImage.ContentLength > 0)
                 {
                     // Save the new image to a folder and get the path
                     var fileName = Path.GetFileName(ProductImage.FileName);
                     var path = Path.Combine(Server.MapPath("~/Images/"), fileName);
                     ProductImage.SaveAs(path);
                     existingProduct.ProductImage = "~/Images/" + fileName; // Save the relative path to the database
                 }

                 context.SaveChanges(); // Save changes to the database
                 return RedirectToAction("ProductList"); // Redirect after successful edit
             }
         }
     }
     catch (Exception ex)
     {
         ModelState.AddModelError("", ex.Message); // Add the error message to the model state
     }

     return View(model); // Return the view with the model in case of error
 }

==========delete==================

 [HttpGet]
 public ActionResult Delete(int id)
 {
     using (var context = new MyntraEntities())
     {
         var product = context.Products.Find(id);
         if (product == null)
         {
             return HttpNotFound(); // Return 404 if the product is not found
         }
         return View(product);
     }
 }

 // POST: Products/Delete/5
 [HttpPost, ActionName("Delete")]
 [ValidateAntiForgeryToken]
 public ActionResult DeleteConfirmed(int id)
 {
     using (var context = new MyntraEntities())
     {
         var product = context.Products.Find(id);
         if (product != null)
         {
             context.Products.Remove(product);
             context.SaveChanges();
         }
         return RedirectToAction("ProductList"); // Redirect to the product list after deletion
     }
 }

==============views================

deatails
====================

    <table id="zero_config" class="table table-striped table-bordered no-wrap">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Image</th>
                <th>Category</th>
                <th>Status</th>
                <th>Color</th>
                <th>Brand</th>

                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                foreach (var product in Model)
                {
                    <tr>
                        <td>
                            <a href="javascript:void(0)" class="font-weight-medium link">@product.ProductName</a>
                        </td>
                        <td>@product.ProductPrice</td> <!-- Format price as currency -->
                        <td>@product.ProductDescription</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.ProductImage)) // Check if ProductImage is not null or empty
                            {
                                <img src="@Url.Content(product.ProductImage)" alt="@product.ProductName" class="img-thumbnail" width="70" height="70" />
                            }
                            else
                            {
                                <span>No Image Available</span>// Placeholder if image is missing
                            }
                        </td>
                        <td>@product.Category</td>
                        <td>
                            <span class="badge @(product.Status == "In Progress" ? "badge-light-warning" : product.Status == "Closed" ? "badge-light-danger" : "badge-light-success")">
                                @product.Status
                            </span>
                        </td>
                        <td>@product.Color</td>
                        <td>@product.Brand</td>
                        @*<td>
    <a href="@Url.Action("EditProducts", "Admin", new { id = product.ProductID })">Edit</a> |
    <a href="@Url.Action("Delete", "Products", new { id = product.ProductID })">Delete</a>
</td>*@
                        <td>
                            <a href="@Url.Action("EditProducts", "Admin", new { id = product.ProductID })" class="btn btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="@Url.Action("Delete", "Admin", new { id = product.ProductID })" class="btn btn-delete">
                                <i class="fas fa-trash-alt"></i> Delete
                            </a>
                        </td>

                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="10" class="text-center">No products found.</td>
                </tr>
            }
        </tbody>
    </table>

==============create=================

                                @using (Html.BeginForm("AddProducts", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <h4 class="mb-3">Add New Product</h4> <!-- Added heading for the form -->

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ProductName)
                                        @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ProductPrice)
                                        @Html.TextBoxFor(model => model.ProductPrice, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ProductDescription)
                                        @Html.TextBoxFor(model => model.ProductDescription, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Category)
                                        @Html.TextBoxFor(model => model.Category, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Color)
                                        @Html.TextBoxFor(model => model.Color, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Brand)
                                        @Html.TextBoxFor(model => model.Brand, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status)
                                        @Html.TextBoxFor(model => model.Status, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        <label for="ImageFile">Upload Product Image</label>
                                        <input type="file" name="ImageFile" id="ImageFile" class="form-control-file" />
                                    </div>

                                    <div class="form-group">
                                        <input type="submit" value="Add" class="btn btn-primary">
                                       
                                    </div>

                                </div>
                                }

===========================edit=========================



                                @using (Html.BeginForm("EditProducts", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.AntiForgeryToken()

                                    <div class="form-horizontal">
                                        @Html.HiddenFor(model => model.ProductID) <!-- Hidden field to track ProductID -->

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductName)
                                            @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control" })
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductPrice)
                                            @Html.TextBoxFor(model => model.ProductPrice, new { @class = "form-control" })
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductDescription)
                                            @Html.TextBoxFor(model => model.ProductDescription, new { @class = "form-control" })
                                        </div>


                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Category)
                                            @Html.TextBoxFor(model => model.Category, new { @class = "form-control" })
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Status)
                                            @Html.TextBoxFor(model => model.Status, new { @class = "form-control" })
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Color)
                                            @Html.TextBoxFor(model => model.Color, new { @class = "form-control" })
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Brand)
                                            @Html.TextBoxFor(model => model.Brand, new { @class = "form-control" })
                                        </div>

                                        <div class="form-group">
                                            @Html.Label("Product Image")
                                            <input type="file" name="ProductImage" />
                                        </div>

                                        <!-- Show the current image if it exists -->
                                        @if (!string.IsNullOrEmpty(Model.ProductImage))
                                        {
                                            <div class="form-group">
                                                <label>Current Image:</label>
                                                <img src="@Url.Content(Model.ProductImage)" alt="Product Image" width="150" />
                                            </div>
                                        }

                                        <div class="form-group">
                                            <input type="submit" value="Update" class="btn btn-primary" />
                                        </div>
                                    </div>
                                }
=====================================delete


                                @using (Html.BeginForm("Delete", "Admin", FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.HiddenFor(m => m.ProductID)

                                <strong>Are you sure you want to delete this product?</strong>
                                <br />
                                    <div class="form-horizontal">
                                       

                                        <table class="table table-bordered table-striped">
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.ProductName)</th>
                                                <td>@Html.DisplayFor(m => m.ProductName)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.ProductPrice)</th>
                                                <td>@Html.DisplayFor(m => m.ProductPrice)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.ProductDescription)</th>
                                                <td>@Html.DisplayFor(m => m.ProductDescription)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.Category)</th>
                                                <td>@Html.DisplayFor(m => m.Category)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.Color)</th>
                                                <td>@Html.DisplayFor(m => m.Color)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.Brand)</th>
                                                <td>@Html.DisplayFor(m => m.Brand)</td>
                                            </tr>
                                            <tr>
                                                <th>@Html.DisplayNameFor(m => m.Status)</th>
                                                <td>@Html.DisplayFor(m => m.Status)</td>
                                            </tr>
                                        </table>

                                        <div class="form-group">
                                            <button type="submit" class="btn btn-danger">Delete</button>
                                            <a href="@Url.Action("ProductList", "Admin")" class="btn btn-secondary">Cancel</a>
                                        </div>
                                    </div>
                                }

=============styles================

<style>
    .btn {
        display: inline-flex;
        align-items: center;
        padding: 5px 5px;
        margin: 0 5px;
        border: none;
        border-radius: 4px;
        text-decoration: none;
        font-size: 14px;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-edit {
        background-color: #007bff; /* Blue color for Edit */
    }

        .btn-edit:hover {
            background-color: #0056b3; /* Darker blue on hover */
        }

    .btn-delete {
        background-color: #dc3545; /* Red color for Delete */
    }

        .btn-delete:hover {
            background-color: #c82333; /* Darker red on hover */
        }

    .btn i {
        margin-right: 5px; /* Space between icon and text */
    }
</style>

